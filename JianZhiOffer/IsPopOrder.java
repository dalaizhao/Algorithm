import java.util.Stack;

/*
 * 题目描述
 *	输入两个整数序列，第一个序列表示栈的压入顺序，
 *	请判断第二个序列是否为该栈的弹出顺序。
 *	假设压入栈的所有数字均不相等。
 *	例如序列1,2,3,4,5是某栈的压入顺序，
 *	序列4，5,3,2,1是该压栈序列对应的一个弹出序列，
 *	但4,3,5,1,2就不可能是该压栈序列的弹出序列。
 *	（注意：这两个序列的长度是相等的）
 * */
public class IsPopOrder {

	// 栈的压入、弹出序列
	public boolean isPopOrder(int[] pushA, int[] popA) {

		if (pushA == null || popA == null || pushA.length == 0 || popA.length == 0 || pushA.length != popA.length)
			return false;

		Stack<Integer> pushAStack = new Stack<>();
		int pushAIndex = 0, popAIndex = 0;
		while (popAIndex < popA.length) {
			while (pushAStack.empty() || pushAStack.peek() != popA[popAIndex]) {
				if (pushAIndex == pushA.length)
					break;
				pushAStack.push(pushA[pushAIndex]);
				pushAIndex++;
			}
			if (pushAStack.peek() != popA[popAIndex]) {
				break;
			}
			pushAStack.pop();
			popAIndex++;
		}
		if (pushAStack.empty() && popAIndex == popA.length)
			return true;
		return false;
	}
}
